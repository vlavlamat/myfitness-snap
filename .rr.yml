# Конфигурация RoadRunner версии 3
# RoadRunner - это высокопроизводительный PHP application server
version: "3"

# === RPC НАСТРОЙКИ ===
# RPC (Remote Procedure Call) - для внутреннего взаимодействия между компонентами RoadRunner
rpc:
  listen: tcp://127.0.0.1:6001  # Адрес и порт для RPC соединений
  # 127.0.0.1 - только локальные соединения для безопасности
  # 6001 - стандартный порт для RPC в RoadRunner
  # Используется для управления и мониторинга RoadRunner через CLI команды
  
# === НАСТРОЙКИ WORKER ПРОЦЕССОВ ===
# Определяет как RoadRunner запускает и управляет PHP worker'ами
server:
  command: "php src/worker.php"  # Команда для запуска PHP worker скрипта
  # worker.php - это ваш PHP скрипт, который будет обрабатывать HTTP запросы
  # Каждый worker - это отдельный PHP процесс, который остается в памяти
  user: ""   # Пользователь от имени которого запускать worker'ы (пусто = текущий)
  group: ""  # Группа от имени которой запускать worker'ы (пусто = текущая)
  # В Docker контейнере обычно оставляем пустым
  
# === HTTP СЕРВЕР НАСТРОЙКИ ===
# Основной HTTP сервер для обработки веб-запросов
http:
  address: 0.0.0.0:8080  # IP и порт для HTTP сервера
  # 0.0.0.0 - слушаем на всех интерфейсах (важно для Docker)
  # 8080 - порт, который будет проксировать nginx
  
  # Middleware - промежуточное ПО, обрабатывающее запросы перед отправкой в PHP
  middleware: ["static", "gzip"]  # Порядок выполнения middleware
  # "static" - обслуживание статических файлов напрямую (без PHP)
  # "gzip" - сжатие ответов для экономии трафика
  
  # Настройки загрузки файлов
  uploads:
    forbid: [".php", ".exe", ".bat"]  # Запрещенные расширения для загрузки
    # Безопасность: не даем загружать исполняемые файлы
    # .php - чтобы не могли загрузить и выполнить PHP код
    # .exe, .bat - исполняемые файлы Windows
    
  # Настройки обслуживания статических файлов
  static:
    dir: "public"  # Директория со статическими файлами
    # RoadRunner будет искать статические файлы в папке public/
    # Это стандартная практика - публичные файлы в отдельной папке
    forbid: [".htaccess", ".php"]  # Файлы, которые нельзя отдавать напрямую
    # .htaccess - конфигурация Apache, не должна быть доступна
    # .php - PHP файлы должны выполняться, а не отдаваться как текст
    
# === НАСТРОЙКИ ЛОГИРОВАНИЯ ===
# Контролируют как RoadRunner записывает логи
logs:
  mode: development  # Режим логирования
  # development - подробные логи для разработки
  # production - минимальные логи для продакшена
  level: debug      # Уровень детализации логов
  # debug - максимально подробно (все события)
  # info - основная информация
  # warn - только предупреждения и ошибки
  # error - только ошибки
  
# === МЕТРИКИ И МОНИТОРИНГ ===
# Prometheus метрики для мониторинга производительности
metrics:
  address: localhost:2112  # Адрес для экспорта метрик
  # localhost:2112 - стандартный адрес для Prometheus метрик
  # Доступ только локально из контейнера для безопасности
  # Метрики включают: количество запросов, время ответа, использование памяти
  
# === АВТОПЕРЕЗАГРУЗКА В РЕЖИМЕ РАЗРАБОТКИ ===
# Автоматическая перезагрузка при изменении файлов (только для разработки!)
reload:
  interval: 1s  # Интервал проверки изменений файлов
  # 1s - проверяем каждую секунду (быстрый отклик на изменения)
  # Можно увеличить до 5s-10s для снижения нагрузки
  
  patterns: [".php"]  # ИСПРАВЛЕНО: было pattern, должно быть patterns
  # Отслеживаем только PHP файлы
  # Игнорируем другие файлы (js, css) так как они обрабатываются фронтендом
  
  # Настройки для конкретных сервисов
  services:
    http:  # Перезагружаем HTTP сервер при изменениях
      dirs: ["src"]      # Отслеживаемые директории
      recursive: true    # Рекурсивно проверяем подпапки
      # src/ - основная папка с PHP кодом
      # recursive: true - проверяем все подпапки в src/
      
# === ДОПОЛНИТЕЛЬНЫЕ НАСТРОЙКИ (можно добавить) ===
# Раскомментируйте и настройте по необходимости:

# # Пул worker'ов для оптимизации производительности
# pool:
#   num_workers: 4      # Количество PHP worker процессов
#   max_jobs: 64        # Максимум запросов на один worker до перезапуска
#   allocate_timeout: 60s   # Таймаут выделения worker'а
#   destroy_timeout: 60s    # Таймаут завершения worker'а

# # Лимиты для предотвращения перегрузки
# limits:
#   services:
#     http:
#       max_memory: 100   # Максимум памяти в MB на worker
#       ttl: 0           # Time to live worker'а (0 = бесконечно)
#       idle_ttl: 10s    # Время жизни неактивного worker'а
#       exec_ttl: 60s    # Максимальное время выполнения запроса

# # Настройки для продакшена
# # В продакшене отключите reload и поставьте logs.mode: production