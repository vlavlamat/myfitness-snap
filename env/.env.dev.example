# ===================================================================
# ПРИМЕР КОНФИГУРАЦИИ ДЛЯ РАЗРАБОТКИ
# ===================================================================
# 1. Скопируйте этот файл как .env
# 2. При необходимости измените имена баз данных и пользователей
# 3. Для разработки можно использовать простые пароли
# ===================================================================

# ===================================================================
# КОНФИГУРАЦИЯ POSTGRESQL ДЛЯ РАЗРАБОТКИ
# ===================================================================

# Основные параметры базы данных PostgreSQL
# Имя базы данных для приложения (разработка)
POSTGRES_DB=your_project_db

# Пользователь PostgreSQL для разработки (упрощенные настройки)
# Создается автоматически при инициализации контейнера
POSTGRES_USER=dev_user

# Простой пароль для разработки (в продакшене используйте сложный)
# Для локальной разработки можно использовать простые пароли
POSTGRES_PASSWORD=password

# ===================================================================
# ПАРАМЕТРЫ ПОДКЛЮЧЕНИЯ BACKEND К POSTGRESQL
# ===================================================================

# Хост базы данных - имя сервиса Docker (для связи между контейнерами)
# В docker-compose сервис называется 'postgres'
DB_HOST=postgres

# Стандартный порт PostgreSQL (5432)
# Внутри Docker сети используется стандартный порт
DB_PORT=5432

# Имя базы данных для подключения (должно совпадать с POSTGRES_DB)
DB_NAME=your_project_db

# Учетные данные для подключения (должны совпадать с PostgreSQL переменными)
DB_USER=dev_user
DB_PASSWORD=password

# ===================================================================
# КОНФИГУРАЦИЯ REDIS ДЛЯ РАЗРАБОТКИ
# ===================================================================

# Минимальное количество мастер-узлов для работоспособности кластера
# В разработке используем упрощенную конфигурацию
REDIS_QUORUM=3

# Таймаут подключения к Redis в секундах (стандартные значения для разработки)
REDIS_TIMEOUT=5

# Таймаут чтения данных из Redis в секундах (стандартные значения для разработки)
REDIS_READ_TIMEOUT=5

# Узлы Redis Cluster (для разработки - полный кластер из 10 узлов)
# В реальной разработке можно использовать меньше узлов для экономии ресурсов
REDIS_CLUSTER_NODES=redis-node1:6379,redis-node2:6379,redis-node3:6379,redis-node4:6379,redis-node5:6379,redis-node6:6379,redis-node7:6379,redis-node8:6379,redis-node9:6379,redis-node10:6379

# ===================================================================
# КОНФИГУРАЦИЯ СЕССИЙ REDIS
# ===================================================================

# Префикс для ключей сессий в Redis (для разработки)
REDIS_SESSION_PREFIX=your_app:

# Время жизни сессии в секундах (86400 сек = 24 часа)
# Увеличено для удобства разработки, чтобы не переавторизовываться часто
REDIS_SESSION_LIFETIME=86400

# Настройки сборщика мусора для сессий
# Вероятность запуска сборщика мусора (1%)
REDIS_GC_PROBABILITY=1
REDIS_GC_DIVISOR=100

# ===================================================================
# МОНИТОРИНГ REDIS
# ===================================================================

# Интервал проверки состояния узлов кластера в секундах
REDIS_CHECK_INTERVAL=30

# Таймаут для ping-запросов при проверке узлов в секундах
REDIS_PING_TIMEOUT=2

# ===================================================================
# КОНФИГУРАЦИЯ ПРИЛОЖЕНИЯ ДЛЯ РАЗРАБОТКИ
# ===================================================================

# Режим работы приложения (разработка)
APP_ENV=development

# Включение режима отладки для разработки (подробные ошибки и логи)
APP_DEBUG=true